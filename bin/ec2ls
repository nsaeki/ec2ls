#!/usr/bin/env ruby
require 'optparse'
require 'aws-sdk-core'
require 'inifile'

INSTANCE_PROPERTIES = %i(
  ami_launch_index
  architecture
  block_device_mappings
  client_token
  ebs_optimized
  hypervisor
  iam_instance_profile
  image_id
  instance_id
  instance_lifecycle
  instance_type
  kernel_id
  key_name
  launch_time
  monitoring
  network_interfaces
  placement
  platform
  private_dns_name
  private_ip_address
  product_codes
  public_dns_name
  public_ip_address
  ramdisk_id
  root_device_name
  root_device_type
  security_groups
  source_dest_check
  spot_instance_request_id
  sriov_net_support
  state
  state_reason
  state_transition_reason
  subnet_id
  tags
  virtualization_type
  vpc_id
)

CUSTOM_PROPERTIES = {
  name:      ->(i) { i.tags.select { |t| t.key == 'Name' }.first.value },
  state:     ->(i) { i.state.name },
  tags:      ->(i) { i.tags.join(',') },
  placement: ->(i) { i.placement.availability_zone },
}

DEFAULT_PROPERTIES = %i(
  instance_id name instance_type placement state
  private_ip_address public_ip_address )


def aws_credential(profile, options = {})
  file = File.join(ENV['HOME'], '.aws', 'credentials')
  ini = IniFile.load(file)
  raise ArgumentError, "Profile #{profile} not found" unless ini[profile]
  if ini[profile]['aws_access_key_id']
    Aws::SharedCredentials.new(profile_name: profile)
  elsif ini[profile]['role_arn']
    cred = Aws::SharedCredentials.new(profile_name: ini[profile]['source_profile'])
    client = Aws::STS::Client.new(credentials: cred, region: options[:region])
    Aws::AssumeRoleCredentials.new(role_arn: ini[profile]['role_arn'],
                                   role_session_name: 'ec2ls-session',
                                   client: client)
  else
    raise ArgumentError, "Profile #{profile} doesn't contains valid key"
  end
end

def all_properties
  (INSTANCE_PROPERTIES + CUSTOM_PROPERTIES.keys).sort.uniq
end

def format_property(instance, property)
  property = property.to_sym

  unless all_properties.include?(property)
    raise ArgumentError, "No such property: #{property}"
  end

  custom = CUSTOM_PROPERTIES[property]
  custom ? custom.call(instance) : instance[property]
end


options = {
  region: ENV['AWS_REGION'] || 'ap-northeast-1',
  properties: DEFAULT_PROPERTIES,
}

OptionParser.new do |opt|
  opt.on('-p', '--profile [PROFILE]', 'Profile name in ~/.aws/credentials') do |v|
    options[:profile] = v
  end
  opt.on('-k', '--keys [KEYS]', 'Show specified values of instance (comma separated)') do |v|
    options[:properties] += v.split(',')
  end
  opt.on('-l', '--list-keys', 'Show all instance keys') do |v|
    puts "Available Keys:"
    puts all_properties.map { |p| "  #{p}" }
    exit
  end
end.parse!

if options[:profile]
  creds = aws_credential(options[:profile], options)
  ec2 = Aws::EC2::Client.new(region: options[:region], credentials: creds)
else
  ec2 = Aws::EC2::Client.new(region: options[:region])
end

ec2.describe_instances.each do |page|
  page.on_success do
    page.reservations.flat_map do |r|
      r.instances.each do |ins|
        puts options[:properties].map { |p| format_property(ins, p) }.join("\t")
      end
    end
  end
end
